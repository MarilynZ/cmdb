// Code generated by gocc; DO NOT EDIT.

package parser

import "github.com/zhihu/cmdb/pkg/query/ast"
import "github.com/zhihu/cmdb/pkg/query/token"

type (
	//TODO: change type and variable names to be consistent with other tables
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Expression	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Expression : Condition	<< []*ast.Requirement{X[0].(*ast.Requirement)},nil >>`,
		Id:         "Expression",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return []*ast.Requirement{X[0].(*ast.Requirement)}, nil
		},
	},
	ProdTabEntry{
		String: `Expression : Expression And Condition	<< append(X[0].([]*ast.Requirement),X[2].(*ast.Requirement)),nil >>`,
		Id:         "Expression",
		NTType:     1,
		Index:      2,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return append(X[0].([]*ast.Requirement), X[2].(*ast.Requirement)), nil
		},
	},
	ProdTabEntry{
		String: `Condition : MetaName InOperator "(" Values ")"	<< &ast.Requirement{Key:X[0].(string),Operator:ast.Operator(X[1].(string)),Value:X[3].([]string)},nil >>`,
		Id:         "Condition",
		NTType:     2,
		Index:      3,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return &ast.Requirement{Key: X[0].(string), Operator: ast.Operator(X[1].(string)), Value: X[3].([]string)}, nil
		},
	},
	ProdTabEntry{
		String: `Condition : MetaName Operator Value	<< &ast.Requirement{Key:X[0].(string),Operator:ast.Operator(X[1].(string)),Value:[]string{X[2].(string)}},nil >>`,
		Id:         "Condition",
		NTType:     2,
		Index:      4,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return &ast.Requirement{Key: X[0].(string), Operator: ast.Operator(X[1].(string)), Value: []string{X[2].(string)}}, nil
		},
	},
	ProdTabEntry{
		String: `Condition : MetaName EqualOperator Value	<< &ast.Requirement{Key:X[0].(string),Operator:ast.Equals,Value:[]string{X[2].(string)}},nil >>`,
		Id:         "Condition",
		NTType:     2,
		Index:      5,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return &ast.Requirement{Key: X[0].(string), Operator: ast.Equals, Value: []string{X[2].(string)}}, nil
		},
	},
	ProdTabEntry{
		String: `Condition : MetaName ExistOperator	<< &ast.Requirement{Key:X[0].(string),Operator:X[1].(ast.Operator)},nil >>`,
		Id:         "Condition",
		NTType:     2,
		Index:      6,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return &ast.Requirement{Key: X[0].(string), Operator: X[1].(ast.Operator)}, nil
		},
	},
	ProdTabEntry{
		String: `Condition : "!" MetaName	<< &ast.Requirement{Key:X[1].(string),Operator:ast.Negates},nil >>`,
		Id:         "Condition",
		NTType:     2,
		Index:      7,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return &ast.Requirement{Key: X[1].(string), Operator: ast.Negates}, nil
		},
	},
	ProdTabEntry{
		String: `Condition : MetaName	<< &ast.Requirement{Key:X[0].(string),Operator:ast.Positive},nil >>`,
		Id:         "Condition",
		NTType:     2,
		Index:      8,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return &ast.Requirement{Key: X[0].(string), Operator: ast.Positive}, nil
		},
	},
	ProdTabEntry{
		String: `Values : Value	<< []string{X[0].(string)},nil >>`,
		Id:         "Values",
		NTType:     3,
		Index:      9,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return []string{X[0].(string)}, nil
		},
	},
	ProdTabEntry{
		String: `Values : Values "," Value	<< append(X[0].([]string),X[2].(string)),nil >>`,
		Id:         "Values",
		NTType:     3,
		Index:      10,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return append(X[0].([]string), X[2].(string)), nil
		},
	},
	ProdTabEntry{
		String: `Value : value	<< string(X[0].(*token.Token).Lit),nil >>`,
		Id:         "Value",
		NTType:     4,
		Index:      11,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return string(X[0].(*token.Token).Lit), nil
		},
	},
	ProdTabEntry{
		String: `Value : string	<< ast.Unquote(X[0].(*token.Token).Lit) >>`,
		Id:         "Value",
		NTType:     4,
		Index:      12,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.Unquote(X[0].(*token.Token).Lit)
		},
	},
	ProdTabEntry{
		String: `MetaName : literal	<< string(X[0].(*token.Token).Lit),nil >>`,
		Id:         "MetaName",
		NTType:     5,
		Index:      13,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return string(X[0].(*token.Token).Lit), nil
		},
	},
	ProdTabEntry{
		String: `InOperator : "notin"	<< string(X[0].(*token.Token).Lit),nil >>`,
		Id:         "InOperator",
		NTType:     6,
		Index:      14,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return string(X[0].(*token.Token).Lit), nil
		},
	},
	ProdTabEntry{
		String: `InOperator : "in"	<< string(X[0].(*token.Token).Lit),nil >>`,
		Id:         "InOperator",
		NTType:     6,
		Index:      15,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return string(X[0].(*token.Token).Lit), nil
		},
	},
	ProdTabEntry{
		String: `ExistOperator : "exists"	<< ast.Exists,nil >>`,
		Id:         "ExistOperator",
		NTType:     7,
		Index:      16,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.Exists, nil
		},
	},
	ProdTabEntry{
		String: `ExistOperator : "exist"	<< ast.Exists,nil >>`,
		Id:         "ExistOperator",
		NTType:     7,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.Exists, nil
		},
	},
	ProdTabEntry{
		String: `ExistOperator : "notexist"	<< ast.DoesNotExist,nil >>`,
		Id:         "ExistOperator",
		NTType:     7,
		Index:      18,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.DoesNotExist, nil
		},
	},
	ProdTabEntry{
		String: `ExistOperator : "notexists"	<< ast.DoesNotExist,nil >>`,
		Id:         "ExistOperator",
		NTType:     7,
		Index:      19,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.DoesNotExist, nil
		},
	},
	ProdTabEntry{
		String: `And : "AND"	<<  >>`,
		Id:         "And",
		NTType:     8,
		Index:      20,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `And : "&&"	<<  >>`,
		Id:         "And",
		NTType:     8,
		Index:      21,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Operator : operator	<< string(X[0].(*token.Token).Lit),nil >>`,
		Id:         "Operator",
		NTType:     9,
		Index:      22,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return string(X[0].(*token.Token).Lit), nil
		},
	},
	ProdTabEntry{
		String: `EqualOperator : equal	<<  >>`,
		Id:         "EqualOperator",
		NTType:     10,
		Index:      23,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
}
