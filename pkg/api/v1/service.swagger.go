// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package v1 generated by go-bindata.// sources:
// pkg/api/v1/service.swagger.json
package v1

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5f\x73\xdb\xb6\xb2\x7f\xcf\xa7\xd8\x51\xef\xcc\x4d\xef\xa8\x72\x93\x73\xe6\xce\xbd\xee\xf4\xc1\x4d\xdc\xc6\x77\x12\xdb\xe3\x38\xe9\x43\x99\xb1\x21\x72\x29\xa1\x21\x01\x16\x00\xe5\xa8\x19\x7f\xf7\x3b\x0b\x80\x24\x48\x51\xb6\x24\xff\x89\x7c\x8e\xf2\x70\x8e\x4c\x02\x8b\xdd\xc5\x6f\x77\x7f\x00\x48\xf6\xeb\x33\x80\x81\xbe\x62\x93\x09\xaa\xc1\x3e\x0c\x5e\x8e\x7e\x1c\x0c\xe9\x1a\x17\xa9\x1c\xec\x03\xdd\x07\x18\x18\x6e\x32\xa4\xfb\xc5\xe7\xc9\x1e\x2b\xf8\xde\xec\xc5\x9e\x46\x35\xe3\x31\x8e\x0a\x25\x8d\xb4\x9d\x00\x06\x33\x54\x9a\x4b\x41\x4d\xfd\x4f\x10\xd2\x80\x46\x33\x78\x06\x70\x6d\x45\xc7\x52\xe8\x32\x47\x3d\xd8\x87\x3f\x5c\x2f\x56\x14\x19\x8f\x99\xe1\x52\xec\xfd\xa9\xa5\xa0\xb6\x9f\x6c\xdb\x42\xc9\xa4\x8c\x57\x6c\xcb\xcc\x54\x37\x3a\x93\x8e\xa4\xaa\x1c\xff\x89\xb1\xb9\x30\xf3\x02\x9b\xbb\x00\x83\x09\x9a\xe0\x4f\x80\x81\x2c\x50\x59\xb9\x47\x09\xe9\x7f\x62\xfb\x9d\x53\xb7\x8b\xb7\x5c\x1b\x6f\xa2\x6d\xaa\x50\x17\x52\xe8\x96\x40\x7b\xe3\xe5\x8f\x3f\x76\x2e\x01\x0c\x12\xd4\xb1\xe2\x85\xf1\x8e\x39\x00\x5d\xc6\x31\x6a\x9d\x96\x19\x54\x92\x46\x81\x78\xdb\x49\xc7\x53\xcc\xd9\x82\x30\x80\xc1\x7f\x28\x4c\x49\xce\x77\x7b\x09\xa6\x5c\x70\x92\xab\xf7\x66\x2f\x48\xc9\x40\xe9\x33\x2f\x79\xd0\xea\x7f\x1d\xfc\x75\x1d\x0e\x39\x48\x30\x65\x65\x66\x6e\x57\x5f\x40\x29\xf0\x4b\x81\xb1\xc1\x04\x50\x29\xa9\x6a\x2b\xee\x6a\x84\x2a\x85\xe1\x39\x1e\x92\xd0\x1b\xf4\x7e\xd6\x63\xc1\xa0\x60\x8a\xe5\x68\x50\x35\x60\x71\xff\x3a\xe6\x08\x96\x5b\x28\xeb\xa9\xbc\xba\x48\x30\x43\x83\x49\x57\x6f\x6e\x2d\xfd\xab\x44\x35\xef\xde\x52\xf8\x57\xc9\x15\x12\x44\x52\x96\x69\xec\xdc\x26\x98\x51\xdf\xb1\x94\x19\x32\xd1\xed\x9d\x4a\x95\x33\x13\x36\x58\x36\x1f\x4b\xb4\xa6\xe0\xe1\xda\xa0\x30\x5b\xa2\x73\xfd\xfb\x53\x30\x17\x86\x4d\xba\xb3\x10\xc6\x53\x23\xe0\xd3\xb3\x8e\xe9\x83\x42\xea\xd5\xe3\xf2\x95\x42\x66\x70\xeb\x23\xb3\x51\x79\x17\x8c\xfd\xb0\x1e\xcb\x64\x01\xb5\x0e\xd0\x7d\x77\x02\x3c\x1b\x55\x76\xe1\xfc\x40\xf3\x73\xef\x40\x2f\x57\xc7\xf9\x87\x22\xd9\xe1\x7c\x87\xf3\xfb\x9b\x1f\x07\xa8\x33\xfc\xab\x44\x6d\x1e\x1e\xf4\xcf\x02\xbf\xf5\x12\xb3\xbd\xaf\xe4\xa1\xeb\x4d\xf9\xd9\x6f\xb8\xfd\xf4\x6c\x17\x1c\xf5\xbf\x25\xc1\x61\xff\xbf\x37\x38\x88\xda\xaf\x17\x1c\x15\xa7\xd1\x46\x71\x31\x79\x50\xc6\xe2\x38\xe4\xca\x58\x7d\xed\x9a\xef\xe0\xba\x83\x6b\x73\xf7\xe1\xe1\x7a\x43\x0a\x6e\x2d\x8b\x57\xe4\xdf\x4f\x8c\x7b\xef\x30\xbc\xbd\x7c\xe4\xfe\xe8\xc7\x3d\xf0\xed\x27\xc6\xb5\x77\xb8\xde\x5e\x5c\x3f\x10\xc7\x5e\x37\xb9\xef\x7d\x4d\x95\xcc\x47\x54\x61\xae\xfd\x6f\xcb\xb5\xf7\x14\x66\xcc\x69\xfc\xb5\xfa\x79\xbd\xf7\xd5\xc8\xaa\xa9\x91\xa3\x05\x52\x7e\x6b\x75\x38\xab\x84\x3e\x95\xfa\x50\x29\xbc\x8b\xa4\xfe\x48\xaa\xc1\xf3\x08\x54\x67\x85\xfd\xcf\x1a\xbf\xdb\xa1\x4e\x15\x38\xdb\xa1\x8d\x8f\xdd\xad\x51\x66\x7b\xe6\xe9\xdb\xd6\x83\x15\x72\xcc\xca\x45\xa0\x4e\xb0\x6b\x97\x01\x9b\xd6\xd7\xdf\x61\x79\x22\xa7\x5f\x4e\x59\x52\x75\x77\xf0\xe5\xff\x2d\x0b\xcc\xad\x49\x11\x33\x8e\x57\xf7\x7f\x8c\xe5\x75\xe9\xdc\x45\x51\xe6\x1d\xff\xd8\xeb\xbf\x1c\xbc\x3f\x7a\xd5\x69\x0c\x30\x38\x3e\x39\x7b\x77\xf0\x76\xf1\xfa\xd9\xd1\xab\x37\xed\x09\xfa\x34\xec\xa2\xa6\x82\x93\x97\xbd\xa6\x53\x7a\x4d\xbf\x37\xaf\xac\xa9\x4c\xc1\x26\x78\x61\xe4\x67\x5c\x52\xe1\xbe\x91\x46\x9a\xff\xbd\x04\xc2\x77\x51\x88\x0b\x83\x13\x54\xcb\xcf\x3f\xb9\x30\xff\x78\xb9\xae\xc2\x5b\x78\xce\xbc\x72\xb1\xd9\x74\xc5\xe1\x56\x10\xff\xb5\x77\xc5\x4c\x3c\xdd\xa4\xe4\xfc\x6e\x3b\x3e\x6c\xcd\x79\xae\x8d\x42\x96\x73\x31\xa9\xaf\xe9\xef\x57\x4f\xe4\xd5\x0c\x38\xa3\x17\x33\x45\xa1\xc8\x36\xc3\x17\x54\x6e\x2c\xea\xab\x3a\xfe\xee\xcd\x65\xce\xba\xe7\x70\x86\xa2\xb3\xae\x84\x2e\x26\xbd\x34\x5b\xac\xd6\x1b\xca\x57\xa4\xf7\xd6\x47\x3d\x75\x09\x3a\xb5\xa9\x77\xe8\xe6\xc1\x21\x27\x07\x9c\xd1\x20\x53\xb8\xcd\x94\x5d\xbd\xde\xd5\xeb\x5d\xbd\xde\xd5\xeb\x5d\xbd\x7e\xb4\x7a\xbd\xe9\x19\xfc\x53\x3a\x7f\xdf\x15\x99\x6d\x2f\x32\xdb\xb3\x69\xf4\xef\x57\xee\xee\x21\xd1\x54\x1d\x57\x7f\x2c\xe2\x89\x3d\x12\xb1\xcb\x20\xbb\x0c\x02\x0f\x59\x95\xab\x33\x85\xf5\x5f\x59\xa8\xf6\x86\x9f\xd8\x4b\x0b\x2d\xb5\x77\xbb\xb7\xfe\xdf\xd3\xa1\xa7\x2b\x84\xe4\xd3\x7d\x6d\xa1\x05\xce\x3b\xbd\xb8\xd0\x8e\xce\x27\x76\x3c\xbe\x7b\x10\x70\xdb\x0f\x17\xef\xeb\xf5\x85\xd5\x01\x7f\xcb\x03\x55\x6d\xbc\x3f\x91\xc7\xaa\x76\x78\x7f\x4a\x78\xbf\xf7\x47\xac\x6e\x03\xff\x0a\x84\xad\x67\x1b\x65\x85\xa5\x50\x3b\x58\x9e\xc8\x82\x68\x17\x2c\x5b\xb3\x18\x59\x81\x83\xa5\x4a\xe6\xdb\xb2\x2b\x5c\xbf\x31\xfe\xcd\x35\x09\x61\xb7\x25\x2a\xc5\x96\x1a\x5e\x10\x44\x1f\x6b\xfb\xa9\x21\xcb\x94\x50\x7f\xb0\x43\xaf\xa9\x75\x69\x73\xf1\x53\xd3\xda\xa5\xe6\xad\xd2\xfa\x9e\x8b\x55\xfd\xdd\x85\x20\x03\x36\x5f\x49\xb0\x5f\x6f\x18\x97\xe9\x81\x98\x87\x15\x6b\xc9\xe1\xf6\xb2\x43\x6d\xdb\xfe\xa2\x54\x59\xb7\x3a\x2d\x0b\x84\x30\xa3\xce\x58\x56\xe2\x2d\x1d\x5b\x25\x24\x58\xd9\xcd\x4d\xe0\xbb\xeb\xde\x2a\x5d\x59\xf8\x2b\xc7\x2c\x79\xc7\xf4\xe7\xbb\xd8\xd9\xfe\xc6\x44\x47\x08\x53\x8a\xb5\xa1\x32\xe0\x06\xf3\xc5\xf3\xff\x55\xf3\x43\xb7\x26\x9e\x4f\x11\x34\xda\xe3\xf3\x94\xac\x81\x9c\xe9\xcf\x60\x75\x1a\xf5\xb8\x21\xd8\x8a\x6d\x89\xb1\x1d\xf6\x21\x1a\xa4\x23\x16\x0d\x22\x41\x6d\x82\x6b\xe3\x51\x42\x57\x23\xf1\x06\x15\xc2\x65\x7a\x09\x0a\x0b\x85\x1a\x85\xd1\xc0\xfc\xc8\x5c\x80\x96\x39\x82\x92\xd2\x40\x8e\x5a\xb3\x09\x0e\xe1\x92\x5d\x02\x13\x09\x5c\x8e\x2f\x23\x61\x1b\x6a\x6a\x69\xa6\x58\xb5\x81\x54\x96\xc2\x76\xbf\x4c\x2f\x87\xae\x71\x72\x59\x8b\xad\xef\x9a\x29\x46\xa2\xea\x63\x5b\x8f\xc6\x97\x23\xd2\xea\xd7\xda\x72\x0d\x4c\x21\x94\x1a\x13\x30\x12\x74\x81\x31\x4f\xe7\xc0\x40\x97\xe3\xd0\x4b\x1a\xcc\x94\x19\xd0\x53\x59\x66\x09\x8c\x31\x12\x0a\x4d\xa9\x04\x26\x30\xa6\xe6\x13\x6a\x5b\xb1\x31\x90\x0a\x72\x99\xf0\x94\xfb\xdb\x02\x5c\x62\x6b\x9a\x8c\x3a\x3a\x64\x5a\xc2\x94\xcd\x10\x18\xc4\xa5\x36\x32\x87\xff\x7b\x7f\x72\x0c\x28\x62\x99\x70\x31\x81\xe7\x1a\x11\xc6\x98\xc9\xab\xef\xad\x01\xdf\x81\xeb\xfe\xce\x76\xe7\x02\x4e\x95\x24\xf4\x51\x60\xd2\xfd\xdf\xa7\x28\x9c\x55\xde\x75\xb1\x14\x06\xbf\x58\x83\x18\x14\x75\xe3\x21\xb0\x9a\x11\xd5\xee\x95\x2a\x12\xba\x1c\xff\x50\xbb\x4e\x43\xca\x33\x83\xca\x99\x43\xe2\x0e\x4e\x8f\xc8\x5f\x52\x64\x73\x2b\x9a\xd9\x61\xa4\xc6\xca\x5d\x4c\x47\xc2\x79\x93\x37\x4a\x90\xb1\x23\xf8\x55\x2a\xc0\x2f\x2c\x2f\x32\x1c\x02\x4f\xeb\x3b\x55\xab\x42\xe1\x8c\xcb\x52\x47\xc2\xb7\x22\x05\xec\x27\x5b\xdc\x24\xf5\x68\xcc\x34\xa4\x32\xcb\xe4\x95\xde\x27\xeb\x09\x8c\x29\x7c\x75\x3f\x00\x18\xec\xc3\xcb\x97\xd5\x5f\xe3\xe6\x06\x40\x02\xfb\xf0\xa2\xf9\xf3\x0b\xb5\xac\xfe\xbc\xae\x7e\xcc\xa9\xd1\x3f\xdc\x5f\xfe\xe2\xdf\xfb\xf0\x3f\x34\x12\x45\x93\x7f\x1e\xe5\x8a\x67\x99\xfd\x50\x4d\xe5\x0f\x6f\x7e\x0c\x36\x39\x91\x86\xaa\xf2\xce\x97\xe1\xdc\xc2\xf6\xef\x48\x3c\x37\x53\xe4\xca\xb5\x71\x32\xc6\x2e\x40\x8d\xb4\xde\xf0\x5c\xd7\xc1\x5c\xe6\xdc\x18\xe7\x4f\x9b\x92\x80\xe6\x34\x12\xb2\x34\x45\x69\xbe\xb7\xb6\x6f\x6c\xfd\x75\x6d\x60\x24\x0e\x28\x5c\x89\x40\x24\x55\xa8\x6a\x6b\x1a\x23\x1f\x13\x95\xfe\x12\x63\x61\x80\x19\xab\x62\xc6\xb4\x81\x42\x6a\xee\xc0\x9f\x02\x8b\x84\xcd\x05\xe0\x72\x93\x45\xec\x11\x01\xaf\xce\x9f\xe0\x92\x65\x25\xd7\xa7\x06\xb2\xab\x13\x4b\x43\x17\xc5\x4d\x6c\x39\x20\x68\x0b\x84\x2c\xab\x1c\xfa\x9c\x69\x82\x52\x6b\x84\x34\x68\x10\x89\x29\xa3\xb8\xc5\x7a\x5a\x30\x71\x91\x74\x2c\x0d\xba\xe0\x66\x61\x42\x4c\x24\x3a\xd5\x04\xd2\xa2\x87\x29\x9e\xcd\xed\xd8\x73\x3f\x31\x91\x30\xb2\xf8\x21\xc3\x19\x66\x0b\x78\x1c\xc1\x91\x80\x98\x69\x74\xe1\x76\x76\xf8\xfe\xbc\xd7\xaa\x60\xbc\xca\xac\x84\x2b\x8c\x4d\x3d\x4a\x2d\x7a\x08\xe3\xd2\xfa\xa7\x2d\x36\x12\x19\xd7\x5d\xc1\x55\x34\x69\x83\x2c\x09\x1d\x86\x2c\x9e\x02\x17\x09\x9f\xf1\xa4\x64\x59\xa5\x6e\x24\x7c\xe4\xd5\x39\x4d\xa1\x96\xa5\x8a\x11\x48\x7a\x9f\x35\x3e\x49\xe5\x68\xa6\x32\x19\x46\x42\x9a\x29\x2a\x08\xd8\x01\xe4\x6c\x4e\x48\xa6\x1c\x34\x82\xdf\xa7\x54\x06\x6a\xd5\x2a\x95\x3c\xdc\x23\x11\x67\xc8\x54\x36\x87\x44\xc6\x65\x8e\xc2\xd8\x40\x9f\xa0\x15\x7a\xc5\xcd\x14\xb8\xd1\x90\x60\x9c\x31\x8f\x02\xaf\xf0\xc1\xe9\xd1\x08\xe0\x48\x44\x82\x89\xb9\xd5\xd1\x39\x00\xd3\x94\xd0\x25\x97\x98\xb5\x57\xfd\xd0\x04\xc0\x8a\x88\x45\x62\x8c\x53\x36\xe3\x14\xa6\x52\x91\x6c\xdd\x9f\x6b\xdd\x8e\x01\x9c\x54\x4e\xd7\x2e\x64\x82\xd9\xe4\x8b\x19\x5f\xd7\xc0\xd3\x70\x35\xe5\xf1\xb4\x82\xae\x4c\x3d\x9c\x98\x9a\xa0\x09\x9d\x4f\x95\x69\x22\x29\xfd\x1b\x69\x7d\x69\x45\x26\x23\x38\xf7\x19\xb8\xa5\x7c\x9d\x8e\xa7\x4c\x4c\x9c\xb3\x7d\xe2\x71\x23\x34\x99\x19\x7a\x13\x33\xf9\x30\x81\x0c\xa9\x0a\xd1\x35\x3b\xa5\x1a\x4a\x61\x64\x19\x4f\x69\x58\x1b\xc2\xb5\x76\x5c\x43\xc1\x74\x55\x62\x64\x24\x1c\x43\x18\xbb\xde\x5e\x57\xaf\xc2\xb0\x2e\x1a\x7c\x22\xa4\x22\x34\xb6\xd4\x63\x59\x56\xd7\x7a\x97\x42\x67\x61\xb5\xb1\x75\xa3\x4e\x22\x8b\xa9\xa9\xb1\x87\x26\xae\xa7\xdc\x0e\x41\xe0\x55\x35\x1e\xa1\x8e\xe6\x9a\x60\x88\x22\x71\x45\xc5\xa2\xe6\x0b\xd7\xc6\x3d\xca\xd9\x1e\xc1\x39\xc9\x4d\x50\xed\x80\x11\xd4\xa9\x23\x12\x7d\x5a\xd9\xd9\xa8\x32\xa6\x97\xb1\x98\x2a\xe1\xd2\xa6\xca\xcb\x85\x5c\xd9\xa9\xc0\x0b\x73\xb6\x20\xaa\x9e\x63\x87\x41\xe7\x8a\x48\x2c\xfa\xc2\x10\x39\xa8\x1d\x52\x17\x9d\x1c\xd5\xc4\x8a\xef\xba\x23\xd0\xa4\x4e\x15\x5d\x67\x58\x56\x15\x16\xf6\x09\x9f\x61\xab\xa9\x97\xd0\x57\xa0\xdb\x45\xa9\x5d\x91\xfb\x0a\x72\xbc\x0f\x7f\xbc\xf8\x14\xd6\x2b\x91\x04\xd3\xbe\xce\x48\x3f\xf6\x0a\x7f\x19\x0a\xb7\xee\xe2\x0b\xfe\xe5\x9e\x6b\x78\xd6\xfb\x87\xa5\xbd\xd1\x60\x68\xf9\x6f\x1c\x0d\x3e\xd5\x7d\x4d\x87\x24\x8c\xd7\x54\xed\x26\x2f\x0c\xe1\x65\xdb\x11\xc0\xc9\xff\x94\x44\x5d\xa6\xa4\x3c\x5c\x28\x39\xe3\x09\x61\xc0\x65\x22\x4a\x15\x33\x54\x8a\xae\x99\x29\xd7\x15\xc9\x80\x30\x01\x12\xc5\xf5\x90\xa6\xc4\x50\x73\x6f\x1b\xa5\x0e\xa6\xc4\x74\x13\x54\x24\x8f\x0a\x78\x5d\x42\xff\x53\x7b\x68\x75\x39\x4c\xe0\xc2\x52\x1b\x1b\x84\x41\x06\xb2\xe3\x2c\x52\x1f\x2f\xab\x66\x87\xd6\x96\x24\x84\xde\x1b\x14\x31\x71\xc9\x45\x7d\x1a\x86\x20\xc3\xe4\x35\xac\x5d\xc2\xaa\x51\x08\xd9\xda\x30\x11\x63\x15\x4b\x4d\x1e\xf6\x6a\x05\xd2\x02\xad\x87\x44\xf7\x13\x19\x09\x47\x64\x2a\xb1\xce\x20\x72\xad\xcb\x8a\x89\xa3\xef\x4d\x7c\xb7\xa0\xd4\x62\x41\xb2\x42\xb2\x73\x58\x1f\xf7\x89\x44\x1f\xf9\x09\x44\xb6\xd8\x0f\x4c\x99\xee\x21\x3f\x0d\xf5\x69\x98\xb7\x46\xef\x01\xb7\x1f\x0a\x38\x93\x59\x59\xa5\x0d\xee\xca\x7a\x8e\x4c\xf8\xbc\x57\x2f\x8e\x10\xe2\x8c\x93\xf2\x35\x71\xfa\x2c\xe4\x95\x75\x1d\x0d\x4e\xb5\x04\x53\xa9\xd0\xde\x4a\x79\x96\xf9\x4c\x63\x43\xc4\x56\x31\xd4\x75\x78\xf8\xd9\x73\x30\xe0\xaa\x9a\x22\x5b\x81\xac\x16\x9c\xea\xd2\x15\x23\xa2\xd0\x54\x6d\x5a\xcb\xd4\x9c\xdb\x7f\x59\xd2\xea\xeb\x6b\x24\xad\xad\x9c\x8e\x96\x3b\x5e\xb1\x79\x95\x55\xe7\x94\xc0\x1b\xe7\x59\x74\x24\x65\x4c\xb9\x8f\x09\xbf\x6f\xcc\x53\x52\xdd\x4e\xdf\x81\x76\xa4\xa4\x45\xe9\x7c\x8d\xcb\x64\xcc\xc2\x84\x5c\x83\xc8\xd6\xfc\xa6\x48\xea\x9e\x2a\x09\x35\x0d\x73\xde\xa8\x42\x2e\x41\xaa\x53\xda\xd3\x99\x90\x0c\x7f\xe6\x22\xb1\xf4\xac\x9f\xfe\xf4\xe4\x2c\x8a\x6a\xc7\x18\x3c\xa9\x98\x4a\x2a\xc8\xe1\xc2\xce\x91\x9e\xef\xe0\x95\x14\x9a\x27\x35\x7d\xa1\x7a\xf2\xe6\xfc\xfc\xd4\xf3\x4e\xb7\xf6\xb1\x17\x48\x0b\x0b\xb8\xc5\xc2\xeb\xa9\x4e\xa9\x51\xb7\xf1\x59\xc7\xbf\x9f\xe8\xd3\x83\xf3\x57\x6f\x6a\xce\x2a\x53\x38\xfd\x70\xde\x0a\x68\xcd\x0c\xd7\xe9\xdc\x8d\xa8\x31\x67\xc2\xf0\x58\x47\xe2\x39\x35\x24\x69\xae\xde\x7a\xca\xe9\x16\x5b\x65\x96\x79\x8d\x74\xb5\x6c\xb6\xcb\xea\xc3\x6a\x59\x2d\xd3\x90\xdb\xf9\x9c\x46\x4d\x86\x0b\x01\x6a\x97\xe2\x94\x0b\xc9\x10\xcd\xc5\x24\x43\x5f\xb2\xe1\xca\xb2\x5b\xb7\xe2\x61\x0a\x23\xa1\xb1\x20\xa2\x5a\x6d\x0e\xc4\x32\xcf\xd9\xc8\x8d\xa4\x41\xb0\xdc\x26\x33\x4b\xc6\xa9\x93\xe5\x79\xb1\x14\x33\x54\xc6\x11\xb9\xbd\x54\xc9\x1c\x88\x38\xa8\x1f\x62\x96\x63\x46\x9d\x68\x24\xdb\x4a\xd8\xf9\xa8\x90\x48\x00\xad\x6a\x6e\xec\x67\xcc\x4d\xbb\x5d\x10\x53\xaf\x06\x47\x35\x81\x6e\xd6\xc9\xd5\xcd\x53\x25\x53\x9e\x61\x53\x84\x3e\x68\x54\xe4\x4b\x05\x3f\xc3\x8b\x9f\xaa\xab\xa7\x53\x5a\x76\x16\xf6\x7f\x7f\x86\x97\x3f\xb5\x56\xc5\x95\x2c\xdb\xb5\x16\xe4\xbd\x94\x70\x5d\x64\x6c\x7e\x61\xed\x0f\x45\xfa\xfb\x2c\x49\x14\x6a\xdd\x96\x6a\x27\xc4\x2d\x75\x59\x97\xdc\x5c\x7a\x95\x2f\x6d\x90\x67\x52\xda\x7c\xab\xcb\x78\xda\x18\x47\x6d\x6b\x45\xea\xfd\x29\xb2\x6a\x14\xea\x53\xed\x60\x05\x6d\xac\x89\xd5\xf5\xeb\x16\x34\xc8\xbb\x9a\xac\xa8\xb0\x51\xef\x6d\x39\x7c\xd8\x44\x5f\xeb\x50\x0f\x4f\xad\xbb\xa3\x1f\xb3\x1c\x87\x8b\x43\xb5\x97\x1c\x94\x44\x4f\x04\x56\x60\xd5\xdd\x1d\x2c\xa3\x90\x99\xa0\x32\x49\x6a\xab\xe1\x4f\x0a\x0a\x46\xda\x4d\xca\x8c\x55\x7b\x0f\xa3\x3a\xae\xfd\x1a\xb4\x0b\x93\x05\x64\xbc\xb7\xe8\x7a\xe7\xff\xaa\xcd\xb1\xa3\x80\x41\x6d\x2e\xdc\xcf\x80\xbe\xf8\x29\xf5\x53\xfd\xcf\x9f\x9a\x3b\xef\xcb\x71\x25\x49\x97\xe3\x8b\x6a\x8c\x9f\xe1\x7f\x7f\xea\xdb\x88\x38\x6f\xe7\xaf\x98\x89\x90\x3d\x2d\x99\xde\x70\x46\xad\x94\x13\x75\x5b\x97\x40\x97\x56\xcf\xa6\x44\x7a\x73\xe7\x05\x5a\xb3\x34\x3c\x8f\x06\x8d\xf1\xd1\xc0\x25\x6f\xae\x6d\x1a\xfe\x9e\x34\xa5\x4a\x57\xa5\x23\x2e\xfc\x96\x48\x95\x5c\x9b\xf9\x85\x8f\xa8\xa8\x64\xd9\xb8\xac\x6c\xee\x90\x38\x9b\x5c\xe7\x76\x01\xe5\x96\xdc\x3e\xaf\x4e\x6d\x36\x6a\xf6\x3c\xac\x7a\xe1\xa2\xc5\xa5\x7b\x2a\x26\x7e\xeb\x72\x46\x83\xb9\x54\xcf\x45\x9c\x95\x49\xbd\x62\xb1\xea\xb9\x6d\x26\xb7\x60\xb6\xab\x87\xcb\xa3\xe3\x8f\x07\x6f\x8f\x5e\x5f\x1c\x9c\xfd\xf6\xe1\xdd\xe1\xf1\xf9\x65\x53\x0f\x49\x25\x9b\xc0\x6c\x39\xce\x59\x51\xb0\x71\x16\x9c\x09\x37\x6f\x6e\x5d\xd6\x2a\x76\x36\x82\xfd\x1e\xab\x9e\xe7\x63\x99\xf1\xb8\xad\x4a\xda\xac\x27\xf6\x07\xad\xfd\xf8\xd6\xe1\xeb\x1d\xb6\xe2\xfb\xde\x69\x5b\xe9\xbc\x81\x6a\xc1\xb2\x7e\x7d\xaf\x94\x2c\x7f\xa1\x24\x94\xea\x11\xb8\x89\x42\x09\x1a\xc6\xb3\x7b\x38\x56\xe8\x3f\xed\x0e\x8f\x78\xfa\x8f\xb7\x7b\xcf\x4d\x7a\x5e\x00\xbc\xc3\x6c\x4d\x54\x11\x5f\x3c\x8c\xe7\xa7\xc6\x14\x0f\x24\xfa\x0e\x93\x6a\xb5\xd2\x86\x99\x72\xe9\xc4\x3e\x3d\x4c\x2c\xff\xc8\xf8\x1d\xcf\x0e\x1f\xcc\xd0\x65\x1f\x32\x5c\xcd\xd2\xfe\x27\x93\xb7\xd7\xd6\x65\x0f\xe4\xdc\x6e\xad\x7f\xb7\xe1\x8e\xa6\x6d\x82\x74\x7f\x12\xbf\x41\x84\x84\x87\x9a\x6b\x77\xdf\x3c\x34\xa9\xe7\x46\x1a\x37\xff\x71\x84\x0d\x8e\xba\x4b\x2e\xcc\x7f\xff\x73\x49\x45\x0b\x1e\x18\xd9\x48\x78\xcf\x83\x08\xa1\xfc\xf0\xd1\x8e\x87\x90\x9f\xa3\x61\x4b\xa7\xa2\xe7\xfd\xfa\x01\x4b\x12\x8b\x79\x96\x9d\x2e\x7f\xcb\xfe\x96\x8c\xf0\x0e\x0d\xfb\x68\x1f\x3d\xd8\x20\x50\x5a\xdf\x99\xb9\x43\xd0\xd0\xf2\x7b\x13\x28\x2d\x7e\xb8\x13\x1e\x22\x6b\x2e\x71\x4d\x18\xbd\xf8\xc5\x5c\x04\x6f\x1d\xaf\x6a\xcb\x8d\xde\xa5\xa9\xb9\x8b\x57\xbf\x51\x4a\xb1\x3b\x41\x17\x7d\x79\x70\x99\x97\x2d\xfe\xda\xc9\xfa\x76\xcf\x7c\xec\x3c\x2f\xb3\xb6\x7b\xee\x47\xcf\x35\x9f\xe0\x59\xd1\xc0\x33\x4c\x51\xa1\x88\xef\x5c\x65\x1f\xbc\x14\xdd\x68\xc6\xfb\x4e\x8d\xd8\x6a\x08\xdf\x6a\x49\xab\x4e\x6e\xb5\x29\xdd\x32\xfd\xe8\x55\xc5\x4d\xfc\x06\x15\xe5\xbc\x8d\xd9\xa7\xe4\xe5\xb2\xe7\xb1\xf4\xc7\xf0\x73\xa9\x6f\xaf\x4f\xdf\x8c\x5a\xdc\xae\xda\x43\xb3\xb6\xf0\xd1\xd6\x7b\x93\x7f\x2b\x86\xdb\xaf\x64\xdc\x73\x12\x5f\x67\x8d\xd7\x43\x60\xf3\xf6\xd3\x9f\x37\x88\x5c\x7c\x68\x74\x45\x17\xdc\x9b\xf9\xb2\xbb\x20\x5b\xc1\x01\x8f\x60\x7c\x18\x5a\xcc\xc4\xd3\x8b\x5b\x16\x35\x7d\x2f\x67\xde\xf4\x6a\xe6\xcd\xde\xfd\xc8\xf1\xaa\xcf\xa9\x1d\x1c\x2f\x7e\x4d\x61\xe1\x3b\x0a\x8b\x5f\x50\x68\x7d\x3b\xe1\x53\xf0\xec\x6c\xdf\xf7\x12\xba\x8a\x05\x5f\xb1\xba\xf3\x9c\x6f\x01\xab\x5f\x27\xf6\x1a\xd3\x57\x23\xb2\xf5\xc7\x50\xef\xe0\x28\xb5\x28\xa3\x0f\x0f\xbd\xb6\xd9\xd7\x60\xd6\x0a\xab\x86\x93\xf6\x3b\x4b\xde\xab\xb8\xad\x5c\x0c\xff\x0b\x6d\x36\x3c\x66\x59\x6c\xed\xc7\x7d\x03\x72\xd7\x87\xf5\x55\xfa\x2d\x42\xfa\x11\xa8\xe4\xbf\x31\x55\xfb\x57\xc5\xfc\x37\x21\x83\xfd\x9b\xe0\x8f\x4d\x07\x9b\x2d\x93\x8d\xf8\xca\xfb\xf3\xb3\xa3\xe3\xdf\x42\x7a\x72\x74\x7c\x7e\xf8\xdb\xe1\x59\x78\xe9\xf5\xc9\x87\x5f\xde\x1e\x86\x57\x7e\x39\x39\x79\x7b\x78\x70\x7c\x23\x8d\xf1\xa2\x3b\xfa\x76\xca\xf8\x46\x4a\x1f\x1d\x1f\x9d\x87\xda\xbc\x3a\x3b\x3c\x38\x6f\xe9\xf7\xe1\xf4\x75\xe7\xca\xeb\xc3\xb7\x87\xe7\x87\x37\x2a\x6c\xc5\x3e\xab\x9c\x7c\xfd\xec\xfa\xd9\xff\x07\x00\x00\xff\xff\x42\x1d\x14\x06\xb7\x78\x00\x00")

func serviceSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceSwaggerJson,
		"service.swagger.json",
	)
}

func serviceSwaggerJson() (*asset, error) {
	bytes, err := serviceSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.swagger.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service.swagger.json": serviceSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"service.swagger.json": &bintree{serviceSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
