// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package v1 generated by go-bindata.// sources:
// pkg/api/v1/service.swagger.json
package v1

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x51\x73\xdb\xb6\x93\x7f\xcf\xa7\xd8\x51\x6f\xe6\xd2\x1b\x55\x6e\xf2\xef\xdc\xdc\xb9\xd3\x07\x37\x71\x1b\xdf\x24\xb6\xc7\x51\xd2\x87\x32\x63\x41\xe4\x52\x42\x43\x02\x2c\x00\xca\x56\x33\xfe\xee\x37\x0b\x80\x24\x48\x51\xb6\x2c\xdb\x89\x3d\x7f\xf9\x21\x91\x48\x60\xb1\xbb\xd8\xfd\xed\x0f\x20\xa8\x2f\xcf\x00\x06\xfa\x82\xcd\x66\xa8\x06\xfb\x30\x78\x39\xfa\x71\x30\xa4\x6b\x5c\xa4\x72\xb0\x0f\x74\x1f\x60\x60\xb8\xc9\x90\xee\x17\x9f\x67\x7b\xac\xe0\x7b\x8b\x17\x7b\x1a\xd5\x82\xc7\x38\x2a\x94\x34\xd2\x76\x02\x18\x2c\x50\x69\x2e\x05\x35\xf5\x1f\x41\x48\x03\x1a\xcd\xe0\x19\xc0\x95\x15\x1d\x4b\xa1\xcb\x1c\xf5\x60\x1f\xfe\x74\xbd\x58\x51\x64\x3c\x66\x86\x4b\xb1\xf7\x97\x96\x82\xda\x7e\xb2\x6d\x0b\x25\x93\x32\xde\xb0\x2d\x33\x73\xdd\xe8\x4c\x3a\x92\xaa\x72\xfa\x17\xc6\xe6\xdc\x2c\x0b\x6c\xee\x02\x0c\x66\x68\x82\xaf\x00\x03\x59\xa0\xb2\x72\x8f\x12\xd2\xff\xc4\xf6\x1b\x53\xb7\xf3\xb7\x5c\x1b\x6f\xa2\x6d\xaa\x50\x17\x52\xe8\x96\x40\x7b\xe3\xe5\x8f\x3f\x76\x2e\x01\x0c\x12\xd4\xb1\xe2\x85\xf1\x8e\x39\x00\x5d\xc6\x31\x6a\x9d\x96\x19\x54\x92\x46\x81\x78\xdb\x49\xc7\x73\xcc\xd9\x8a\x30\x80\xc1\x7f\x28\x4c\x49\xce\x77\x7b\x09\xa6\x5c\x70\x92\xab\xf7\x16\x2f\x48\xc9\x40\xe9\x33\x2f\x79\xd0\xea\x7f\x15\x7c\xbb\x0a\x87\x1c\x24\x98\xb2\x32\x33\x37\xab\x2f\xa0\x14\x78\x59\x60\x6c\x30\x01\x54\x4a\xaa\xda\x8a\xbb\x1a\xa1\x4a\x61\x78\x8e\x87\x24\xf4\x1a\xbd\x9f\xf5\x58\x30\x28\x98\x62\x39\x1a\x54\x4d\xb0\xb8\xbf\x8e\x39\x82\xe5\x36\x94\xf5\x5c\x5e\x9c\x27\x98\xa1\xc1\xa4\xab\x37\xb7\x96\xfe\x5d\xa2\x5a\x76\x6f\x29\xfc\xbb\xe4\x0a\x29\x44\x52\x96\x69\xec\xdc\xa6\x30\xa3\xbe\x53\x29\x33\x64\xa2\xdb\x3b\x95\x2a\x67\x26\x6c\xb0\x6e\x3e\xd6\x68\x4d\xc9\xc3\xb5\x41\x61\x1e\x89\xce\xf5\xe7\x4f\xc1\x5c\x18\x36\xeb\xce\x42\x98\x4f\x8d\x80\x4f\xcf\x3a\xa6\x0f\x0a\xa9\x37\xcf\xcb\x57\x0a\x99\xc1\x47\x9f\x99\x8d\xca\xbb\x64\xec\x0f\xeb\xa9\x4c\x56\xa2\xd6\x05\x74\xdf\x9d\x20\x9e\x8d\x2a\xbb\xe1\xfc\x40\xf3\x73\xef\x81\x5e\x6e\x1e\xe7\x1f\x8a\x64\x17\xe7\xbb\x38\xbf\xbf\xf9\x71\x01\x75\x86\x7f\x97\xa8\xcd\xc3\x07\xfd\xb3\xc0\x6f\xbd\xc4\x6c\xef\x0b\x79\xe8\x6a\x5b\x7e\xf6\x3b\x3e\x7e\x7a\xb6\x4b\x8e\xfa\x6f\x4d\x72\xd8\xff\x7b\x93\x83\xa8\xfd\xed\x92\xa3\xe2\x34\xda\x28\x2e\x66\x0f\xc1\x58\xae\x89\xe9\xd6\x3a\x63\x43\x42\xf3\xc4\xc8\xcc\x2e\x86\x1f\x2f\xc0\xdf\x1f\x9e\xdf\x03\x81\x79\x62\xe4\x65\x17\xd7\x8f\x37\xae\x1f\x88\xb4\xdc\x16\xdc\xf7\xbe\x50\x71\xd9\x82\xab\x3c\x91\x7d\x24\xa7\x2c\xa9\xba\xdb\x42\xf2\x7f\x6b\x92\xc2\x92\x8c\x87\x27\x2c\x1b\x6c\x0b\x2d\x38\x5e\xdc\xff\x86\x90\xd7\xa5\x73\x17\x45\x99\x77\xfc\x63\xaf\xff\x7a\xf0\xfe\xe8\x55\xa7\x31\xc0\xe0\xf8\xe4\xec\xdd\xc1\xdb\xd5\xeb\x67\x47\xaf\xde\xb4\x27\xe8\xd3\xb0\x1b\x35\x55\x38\x79\xd9\xb7\x74\x4a\xaf\xe9\xf7\xe6\x95\x5b\x2a\x53\xb0\x19\x9e\x1b\xf9\x19\x57\xf6\xd7\xbe\xa9\x46\x9a\xff\xb3\x26\x84\xef\xa2\x10\x17\x06\x67\xa8\xd6\xef\x24\x72\x61\xfe\xf5\xf2\xb6\x0a\x3f\xc2\x1d\xdb\xaf\x53\x6a\xf6\xfe\x6b\xef\x82\x99\x78\xbe\x4d\xc9\xf9\xc3\x76\x7c\xd8\x9a\xf3\x5c\x1b\x85\x2c\xe7\x62\x56\x5f\xd3\xdf\x6f\x0e\xe4\xd5\x0c\x38\xa3\x57\x91\xa2\x50\x64\x9b\xe1\x2b\x2a\x37\x16\xf5\x55\x1d\x7f\xf7\xfa\x32\x67\xdd\x73\xb8\x40\xd1\x21\x14\xd0\x8d\x49\x2f\xcd\x16\xab\xdb\x0d\xe5\x2b\xd2\x7b\xeb\xa3\x9e\xba\x04\x9d\xda\xd4\x3b\x74\xf3\x08\xce\xc9\x01\x67\x34\xc8\x14\x6e\x32\x65\x57\xaf\x77\xf5\x7a\x57\xaf\x77\xf5\x7a\x57\xaf\xbf\x5a\xbd\xde\x76\x37\xfb\x29\xed\x64\xef\x8a\xcc\x63\x2f\x32\x5f\x69\x3f\x7d\x57\xee\x7a\xca\xdd\x3d\x00\x4d\xbd\xd1\xea\x20\x74\x23\xf8\x78\xed\x9a\xee\x10\x64\x87\x20\xee\xee\x93\x40\x90\x87\xaa\xca\x0a\x33\x9b\x23\xab\x87\xff\x6e\x7c\x28\x77\xe6\xbb\x3e\xa9\x73\x46\xa1\xd2\xbb\xe4\xea\x0f\xe9\x6f\xfb\x20\x63\xc3\x19\xda\x38\x21\x5a\x61\xba\x36\x2d\xea\xa3\xb7\x81\x32\xcd\x41\x59\x7b\x80\x77\x5a\xa6\x07\x62\x19\xa6\xc8\x9a\x5d\x99\x75\xbb\x31\xb6\xfd\x79\xa9\xb2\x6e\x42\xac\xcb\xfb\x70\x12\x17\x2c\x2b\xf1\x86\x8e\xad\xa8\x0d\x58\xfe\xd2\x04\x9e\xbc\xea\xc5\x83\xca\xc2\xdf\x38\x66\xc9\x3b\xa6\x3f\xdf\xc5\xce\xf6\x31\xe3\x8e\x10\xa6\x14\x6b\x07\xd1\x80\x1b\xcc\x57\x37\xae\x36\x05\xe6\x6e\x1a\x8e\xe7\x08\x1a\xed\xbe\x4f\x4a\xd6\x40\xce\xf4\x67\xb0\x3a\x8d\x7a\xdc\x10\x70\x88\x96\x18\xdb\x61\x1f\xa2\x41\x3a\x62\xd1\x20\x12\xd4\x26\xb8\x36\x1d\x25\x74\x35\x12\x6f\x50\x21\x4c\xd2\x09\x28\x2c\x14\x6a\x14\x46\x03\xf3\x23\x73\x01\x5a\xe6\x08\x4a\x4a\x03\x39\x6a\xcd\x66\x38\x84\x09\x9b\x00\x13\x09\x4c\xa6\x93\x48\xd8\x86\x9a\x5a\x9a\x39\x56\x6d\x20\x95\xa5\xb0\xdd\x27\xe9\x64\xe8\x1a\x27\x93\x5a\x6c\x7d\xd7\xcc\x31\x12\x55\x1f\xdb\x7a\x34\x9d\x8c\x48\xab\xdf\x6a\xcb\x35\x30\x85\x50\x6a\x4c\xc0\x48\xd0\x05\xc6\x3c\x5d\x02\x03\x5d\x4e\x43\x2f\x69\x30\x73\x66\x40\xcf\x65\x99\x25\x30\xc5\x48\x28\x34\xa5\x12\x98\xc0\x94\x9a\xcf\xa8\x6d\x55\x00\x40\x2a\xc8\x65\xc2\x53\xee\x6f\x0b\x28\xed\x93\xc7\xa6\xc9\xa8\xa3\x43\xa6\x25\xcc\xd9\x02\x81\x41\x5c\x6a\x23\x73\xf8\xbf\xf7\x27\xc7\x80\x22\x96\x09\x17\x33\x78\xae\x11\x61\x8a\x99\xbc\xf8\xde\x1a\xf0\x1d\xb8\xee\xef\x6c\x77\x2e\xe0\x54\x49\x8a\x3e\x4a\x4c\xba\xff\xc7\x1c\x85\xb3\xca\xbb\x2e\x96\xc2\xe0\xa5\x35\x88\x41\x51\x37\x1e\x02\xab\x41\xb8\x76\xaf\x54\x91\xd0\xe5\xf4\x87\xda\x75\x1a\x52\x9e\x19\x54\xce\x1c\x12\x77\x70\x7a\x44\xfe\x92\x22\x5b\x5a\xd1\xcc\x0e\x23\x35\x56\xee\x62\x3a\x12\xce\x9b\xbc\x51\x82\x8c\x1d\xc1\x6f\x52\x01\x5e\xb2\xbc\xc8\x70\x08\x3c\xad\xef\x54\xad\x0a\x85\x0b\x2e\x4b\x1d\x09\xdf\x8a\x14\xb0\xa7\xf6\xdd\x24\xf5\x68\xcc\x34\xa4\x32\xcb\xe4\x85\xde\x27\xeb\x29\x18\x53\xf8\xe2\x3e\x00\x30\xd8\x87\x97\x2f\xab\x6f\xd3\xe6\x06\x40\x02\xfb\xf0\xa2\xf9\x7a\x49\x2d\xab\xaf\x57\xd5\x87\x25\x35\xfa\x97\xfb\xe6\x2f\xfe\xb3\x0f\xff\x43\x23\x51\x36\xf9\x8d\xd4\x0b\x9e\x65\xf6\x5d\x85\xca\x1f\xde\xfc\x18\x2c\x38\x91\x86\xaa\xf2\xce\xe5\x70\x69\xc3\xf6\x9f\x48\x3c\x37\x73\xe4\xca\xb5\x71\x32\xa6\x2e\x41\x8d\xb4\xde\xf0\xe5\xd5\x85\xb9\xcc\xb9\x31\xce\x9f\x16\x92\x80\xe6\x34\x12\xb2\x34\x45\x69\xbe\xb7\xb6\x6f\x6d\xfd\x55\x6d\x60\x24\x0e\x28\x5d\x89\xb1\x24\x55\xaa\x6a\x6b\x1a\x23\x1f\x53\xf5\xbe\x8c\xb1\x30\xc0\x8c\x55\x31\x63\xda\x40\x21\x35\x77\xc1\x9f\x02\x8b\x84\xc5\x02\x70\xd8\x64\x23\xf6\x88\x02\xaf\xc6\x4f\x70\x60\x59\xc9\xf5\xd0\x40\x76\x75\x72\x69\xe8\xb2\xb8\xc9\x2d\x17\x08\xda\x06\x42\x96\x55\x0e\x7d\xce\x34\x85\x52\x6b\x84\x34\x68\x10\x89\x39\xa3\xbc\xc5\x7a\x5a\x30\x71\x99\x74\x2c\x0d\xba\xe4\x66\x21\x20\x26\x12\x9d\x6a\x02\x89\x67\x31\xc5\xb3\xa5\x1d\x7b\xe9\x27\x26\x12\x46\x16\x3f\x64\xb8\xc0\x6c\x25\x1e\x47\x70\x24\x20\x66\x1a\x5d\xba\x9d\x1d\xbe\x1f\xf7\x5a\x15\x8c\x57\x99\x95\x70\x85\xb1\xa9\x47\xa9\x45\x0f\x61\x5a\x5a\xff\xb4\xc5\x46\x22\xe3\xba\x2b\xb8\xca\x26\x6d\x90\x25\xa1\xc3\x90\xc5\x73\xe0\x22\xe1\x0b\x9e\x94\x2c\xab\xd4\x8d\x84\xcf\xbc\x1a\xd3\x14\x6a\x59\xaa\x18\x81\xa4\xf7\x59\xe3\x41\x2a\x47\x33\x97\xc9\x30\x12\xd2\xcc\x51\x41\xc0\x0e\x20\x67\x4b\x8a\x64\xc2\xa0\x11\xfc\x31\xa7\x32\x50\xab\x56\xa9\xe4\xc3\x3d\x12\x71\x86\x4c\x65\x4b\x48\x64\x5c\xe6\x28\x8c\x4d\xf4\x19\x5a\xa1\x17\xdc\xcc\x81\x1b\x0d\x09\xc6\x19\xf3\x51\xe0\x15\x3e\x38\x3d\x1a\x01\x1c\x89\x48\x30\xb1\xb4\x3a\x3a\x07\x60\x9a\x52\x74\xc9\x35\x66\xed\x55\x1f\x34\x05\x60\x45\xd1\x22\x31\xc5\x39\x5b\x70\x4a\x53\xa9\x48\xb6\xee\xc7\x5a\x77\x8c\x04\x4e\x2a\xa7\x6b\x97\x32\xc1\x6c\xf2\x55\xc4\xd7\x75\xe0\x69\xb8\x98\xf3\x78\x5e\x85\xae\x4c\x7d\x38\x31\x35\x43\x13\x3a\x9f\x2a\xd3\x4c\x12\xfc\x1b\x69\x7d\x69\x45\x26\x23\x18\x7b\x04\x6e\x29\x5f\xc3\xf1\x9c\x89\x99\x73\xb6\x07\x1e\x37\x42\x83\xcc\xd0\x0b\xcc\xe4\xc3\x04\x32\xa4\x2a\x44\xd7\xec\x94\x6a\x28\x85\x91\x65\x3c\xa7\x61\x6d\x0a\xd7\xda\x71\x0d\x05\xd3\x55\x89\x91\x91\x70\x0c\x61\xea\x7a\x7b\x5d\xbd\x0a\xc3\xba\x68\xf0\x99\x90\x8a\xa2\xb1\xa5\x1e\xcb\xb2\xba\xd6\x3b\x08\x5d\x84\xd5\xc6\xd6\x8d\x1a\x44\x56\xa1\xa9\xb1\x87\x26\xae\xa7\xdc\x0e\x41\xe0\x45\x35\x1e\x45\x1d\xcd\x35\x85\x21\x8a\xc4\x15\x15\x1b\x35\x97\x5c\x1b\xf7\x0c\xb2\x3d\x82\x73\x92\x9b\xa0\xda\x01\x23\xa8\xa1\x23\x12\x7d\x5a\xd9\xd9\xa8\x10\xd3\xcb\x58\x85\x4a\x98\x58\xa8\x9c\xac\x60\x65\xa7\x02\xaf\xcc\xd9\x8a\xa8\x7a\x8e\x5d\x0c\x3a\x57\x44\x62\xd5\x17\x86\xc8\x41\xed\x90\xba\xe8\xe4\xa8\x66\x56\x7c\xd7\x1d\x81\x26\x35\x54\x74\x9d\x61\x59\x55\x58\xd8\x67\x7c\x81\xad\xa6\x5e\x42\x5f\x81\x6e\x17\xa5\x76\x45\xee\x2b\xc8\xf1\x3e\xfc\xf9\xe2\x53\x58\xaf\x44\x12\x4c\xfb\x6d\x46\xfa\xb1\x57\xf8\xcb\x50\xb8\x75\x17\x5f\xf1\x2f\xf7\x5c\xc3\xb3\xde\x3f\x2d\xed\x8d\x06\x43\xcb\x7f\xe3\x68\xf0\xa9\xee\x6b\x3a\x24\x61\x7a\x4b\xd5\xae\xf3\xc2\x10\x5e\xb6\x1d\x01\x9c\xfc\x4f\x20\xea\x90\x92\x70\xb8\x50\x72\xc1\x13\x8a\x01\x87\x44\x04\x15\x0b\x54\x8a\xae\x99\x39\xd7\x15\xc9\x80\x10\x00\x89\xe2\xfa\x90\x26\x60\xa8\xb9\xb7\xcd\x52\x17\xa6\xc4\x74\x13\x54\x24\x8f\x0a\x78\x5d\x42\xff\x53\xfb\xd0\xea\x72\x98\xc0\x85\xa5\x36\x36\x09\x03\x04\xb2\xe3\xac\x52\x1f\x2f\xab\x66\x87\xd6\x96\x24\x0c\xbd\x37\x28\x62\xe2\x92\xab\xfa\x34\x0c\x41\x86\xe0\x35\xac\x5d\xc2\xaa\x51\x28\xb2\xb5\x61\x22\xc6\x2a\x97\x1a\x1c\xf6\x6a\x05\xd2\x02\xad\x87\x44\xf7\x13\x19\x09\x47\x64\x2a\xb1\xce\x20\x72\xad\x43\xc5\xc4\xd1\xf7\x26\xbf\x5b\xa1\xd4\x62\x41\xb2\x8a\x64\xe7\xb0\x3e\xee\x13\x89\x3e\xf2\x13\x88\x6c\xb1\x1f\x98\x33\xdd\x43\x7e\x1a\xea\xd3\x30\x6f\x8d\xde\x03\x6e\x6b\x02\x70\x21\xb3\xb2\x82\x0d\xee\xca\x7a\x8e\x4c\x78\xdc\xab\x17\x47\x08\x71\xc6\x49\xf9\x9a\x38\x7d\x16\xf2\xc2\xba\x8e\x06\xa7\x5a\x82\xa9\x54\x68\x6f\xa5\x3c\xcb\x3c\xd2\xd8\x14\xb1\x55\x0c\x75\x9d\x1e\x7e\xf6\x5c\x18\x70\x55\x4d\x91\xad\x40\x56\x0b\x4e\x75\xe9\x82\x11\x51\x68\xaa\x36\xad\x65\x6a\xce\xed\x5f\x2e\xb6\xfa\xfa\x1a\x49\x6b\x2b\xa7\xa3\xe5\x8e\x17\x6c\x59\xa1\xea\x92\x00\xbc\x71\x9e\x8d\x8e\xa4\x8c\x09\xfb\x98\xf0\x5b\x55\x3c\x25\xd5\xed\xf4\x1d\x68\x47\x4a\x5a\x94\xce\xd7\xb8\x4c\xc6\x2c\x04\xe4\x3a\x88\x6c\xcd\x6f\x8a\xa4\xee\xa9\x92\x50\xd3\x30\xe7\x8d\x2a\xe5\x12\xa4\x3a\xa5\x3d\x9d\x09\xc9\xf0\x67\x2e\x12\x4b\xcf\xfa\xe9\x4f\x0f\x66\x51\x56\x3b\xc6\xe0\x49\xc5\x5c\x52\x41\x0e\x17\x76\x8e\xf4\x7c\x07\xaf\xa4\xd0\x3c\xa9\xe9\x0b\xd5\x93\x37\xe3\xf1\xa9\xe7\x9d\x6e\xed\x63\x2f\x90\x16\x36\xe0\x56\x0b\xaf\xa7\x3a\xa5\x46\xdd\x8e\xcf\x3a\xff\xfd\x44\x9f\x1e\x8c\x5f\xbd\xa9\x39\xab\x4c\xe1\xf4\xc3\xb8\x95\xd0\x9a\x19\xae\xd3\xa5\x1b\x51\x63\xce\x84\xe1\xb1\x8e\xc4\x73\x6a\x48\xd2\x5c\xbd\xf5\x94\xd3\x2d\xb6\xca\x2c\xf3\x1a\xe9\x6a\xd9\x6c\x97\xd5\x87\xd5\xb2\x5a\xa6\x21\xb7\xf3\x98\x46\x4d\x86\x2b\x09\x6a\x97\xe2\x84\x85\x64\x88\xe6\x62\x96\xa1\x2f\xd9\x70\x61\xd9\xad\x5b\xf1\x30\x85\x91\xd0\x58\x10\x51\xad\x36\x07\x62\x99\xe7\x6c\xe4\x46\xd2\x20\x58\x6e\xc1\xcc\x92\x71\xea\x64\x79\x5e\x2c\xc5\x02\x95\x71\x44\x6e\x2f\x55\x32\x07\x22\x0e\xea\x87\x98\xe5\x98\x51\x27\x1a\xc9\xb6\x12\x76\x3e\xaa\x48\xa4\x00\xad\x6a\x6e\xec\x67\xcc\x4d\xbb\x5d\x10\x53\xaf\x26\x8e\x6a\x02\xdd\xac\x93\xab\x9b\xa7\x4a\xa6\x3c\xc3\xa6\x08\x7d\xd0\xa8\xc8\x97\x0a\x7e\x81\x17\x3f\x57\x57\x4f\xe7\xb4\xec\x2c\xec\xbf\xbf\xc0\xcb\x9f\x5b\xab\xe2\x4a\x96\xed\x5a\x0b\xf2\x5e\x4a\xb8\x2e\x32\xb6\x3c\xb7\xf6\x87\x22\xfd\x7d\x96\x24\x0a\xb5\x6e\x4b\xb5\x13\xe2\x96\xba\xac\x4b\x6e\x26\x5e\xe5\x89\x4d\xf2\x4c\x4a\x8b\xb7\xba\x8c\xe7\x8d\x71\xd4\xb6\x56\xa4\xde\x9f\x22\xab\x46\xa1\x3e\xd5\x0e\x56\xd0\xc6\x9a\x58\x5d\xbf\x6a\x85\x06\x79\x57\x93\x15\x55\x6c\xd4\x7b\x5b\x2e\x3e\x2c\xd0\xd7\x3a\xd4\xc3\x53\xeb\xee\xe8\xc7\x2c\xc7\xe1\xea\x50\xed\x25\x07\x81\xe8\x89\xc0\x2a\x58\x75\x77\x07\xcb\x28\x64\x26\xa8\x4c\x92\xda\x6a\xf8\x8b\x92\x82\x91\x76\xb3\x32\x63\xd5\xde\xc3\xa8\xce\x6b\xbf\x06\xed\x86\xc9\x4a\x64\xbc\xb7\xd1\xf5\xce\x7f\xab\xcd\xb1\xa3\x80\x41\x6d\xce\xdd\xc7\x80\xbe\xf8\x29\xf5\x53\xfd\xd3\xcf\xcd\x9d\xf7\xe5\xb4\x92\xa4\xcb\xe9\x79\x35\xc6\x2f\xf0\xbf\x3f\xf7\x6d\x44\x8c\xdb\xf8\x15\x33\x11\xb2\xa7\x35\xd3\x1b\xce\xa8\x95\x72\xa2\x6e\xea\x12\xe8\xd2\xea\xd9\x94\x48\x6f\xee\xb2\x40\x6b\x96\x86\xe7\xd1\xa0\x31\x3e\x1a\x38\xf0\xe6\xda\xc2\xf0\xf7\xa4\x29\x55\xba\x0a\x8e\xb8\xf0\x5b\x22\x15\xb8\x36\xf3\x0b\x1f\x51\x51\xc9\xb2\x79\x59\xd9\xdc\x21\x71\x16\x5c\x97\x76\x01\xe5\x96\xdc\x1e\x57\xe7\x16\x8d\x9a\x3d\x0f\xab\x5e\xb8\x68\x71\x70\x4f\xc5\xc4\x6f\x5d\x2e\x68\x30\x07\xf5\x5c\xc4\x59\x99\xd4\x2b\x16\xab\x9e\xdb\x66\x72\x0b\x66\xbb\x7a\x98\x1c\x1d\x7f\x3c\x78\x7b\xf4\xfa\xfc\xe0\xec\xf7\x0f\xef\x0e\x8f\xc7\x93\xa6\x1e\x92\x4a\x16\xc0\x6c\x39\xce\x59\x51\xb0\x69\x16\x3c\x86\x6a\x8e\x1c\x4e\x6a\x15\x3b\x1b\xc1\x7e\x8f\x55\x2f\xf3\xa9\xcc\x78\xdc\x56\x25\x6d\xd6\x13\xfb\x83\xd6\x7e\x7c\xeb\x79\xcf\x1d\xb6\xe2\xfb\x0e\x63\x6e\xf4\xbc\x81\x6a\xc1\xba\x7e\x7d\x67\xa1\xd6\x9f\x84\x0a\xa5\xfa\x08\xdc\x46\xa1\x04\x0d\xe3\xd9\x3d\x3c\x56\xe8\x7f\xf0\x14\x3e\xe2\xe9\x7f\xa2\xd6\xfb\xdc\xa4\xe7\xe4\xea\x1d\x66\x6b\xa6\x8a\xf8\xfc\x61\x3c\x3f\x37\xa6\x78\x20\xd1\x77\x98\x54\xab\x95\x36\xcc\x94\x6b\x27\xf6\xe9\xc5\xc4\xfa\xdf\x99\xb9\xe3\xb3\xc3\x07\x33\x74\xdd\xab\xd7\x37\x5b\xea\x8f\xa9\xdc\xd1\xb0\x6d\xe6\xde\x3f\xad\xde\x22\x66\xc2\xc7\x7c\xb7\xee\xbe\x7d\xb0\x52\xcf\xad\x34\x6e\x7e\x31\x6a\x8b\x87\xbf\x25\x17\xe6\xbf\x7f\x5a\x83\xf1\xf6\xcc\xc6\x39\x01\xd8\x76\xc2\x69\xe1\xf1\x83\xed\xde\x2b\xdf\xad\x4c\x1e\x4e\x7e\x8e\x86\xad\x9d\x8a\x9e\x57\x25\x06\x2c\x49\x6c\xc4\xb3\xec\x74\xfd\x0b\x13\x37\xe4\xc8\x3b\x34\xec\xa3\x7d\x18\xbf\x45\xa2\xb4\x5e\x19\xbc\x43\xd2\xd0\x82\x74\x9b\x50\x5a\x7d\xf9\x1e\x1e\x02\x47\xd6\xb8\x26\xcc\x5e\xbc\x34\xe7\xc1\x01\xf2\x4d\x6d\xb9\xd6\xbb\x34\x35\x77\xf1\xea\x37\x82\x14\xbb\x37\x72\xde\x87\x83\xeb\xbc\x6c\xe3\xaf\x0d\xd6\x37\x7b\xe6\x63\xe7\x04\xc9\xad\xdd\x73\x3f\x7a\xde\xf2\x4c\xcb\x86\x06\xbe\xef\x80\xeb\xa3\x9e\xfb\x1b\x2d\x69\x15\x98\x47\x6d\x4a\xb7\xbe\x7d\x75\x38\x76\x13\xbf\x05\x14\x8f\xdb\x71\xfc\x94\xbc\x5c\xf6\x1c\xaa\xfc\x1a\x7e\x2e\xf5\xcd\xc0\xfe\xcd\x6a\xf2\xcd\xaa\x3d\x34\xdd\x71\x87\xd0\xef\x59\xfe\x8d\x31\xdc\xfe\xc9\x87\x7b\x26\xe2\xb7\x59\x2e\xf4\x30\xbf\xbc\x7d\x90\xf0\x1a\x91\xab\xe7\x0f\x37\x74\xc1\xbd\x99\x2f\xbb\x2b\x99\x0d\x1c\xf0\x15\x8c\x0f\x53\x8b\x99\x78\x7e\x7e\xc3\x6a\xa0\xef\x9d\xaf\xeb\xde\xf8\xba\xde\xbb\x1f\x39\x5e\xf4\x39\xb5\x13\xc7\xab\x6f\x94\xac\xbc\x4b\xb2\xfa\x16\x49\xeb\xfd\x91\x4f\xc1\x31\xcc\xbe\x77\x46\xba\x8a\x05\x6f\xf2\xde\x79\xce\x1f\x01\x1d\xbe\x4d\xee\x35\xa6\x6f\xc6\x00\x5b\x07\xaa\xbf\x41\xc1\x4b\x95\xcc\xb7\xe9\x67\xe4\x37\x28\xaf\xff\xc6\xe5\xeb\xa1\x57\xeb\x5f\xb3\x3c\x36\x0b\x8f\xad\xc0\xeb\xfd\xf8\xec\xe8\xf8\xf7\x10\xab\x8e\x8e\xc7\x87\xbf\x1f\x9e\x85\x97\x5e\x9f\x7c\xf8\xf5\xed\x61\x78\xe5\xd7\x93\x93\xb7\x87\x07\xc7\xd7\x62\x9a\x17\xdd\xd1\xb7\x93\xd3\x5b\x29\x7d\x74\x7c\x34\x0e\xb5\x79\x75\x76\x78\x30\x6e\xe9\xf7\xe1\xf4\x75\xe7\xca\xeb\xc3\xb7\x87\xe3\xc3\x6b\x15\xb6\x62\x9f\x55\x4e\xbe\x7a\x76\xf5\xec\xff\x03\x00\x00\xff\xff\xf5\x86\x08\xc0\x12\x5d\x00\x00")

func serviceSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceSwaggerJson,
		"service.swagger.json",
	)
}

func serviceSwaggerJson() (*asset, error) {
	bytes, err := serviceSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.swagger.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service.swagger.json": serviceSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"service.swagger.json": &bintree{serviceSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
